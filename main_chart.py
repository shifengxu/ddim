import os.path

import numpy as np
import torchvision as tv
import matplotlib.pyplot as plt

def fig_trajectory_ori_vs_new():
    fig = plt.figure(figsize=(16, 4))
    ax = fig.add_subplot(111)
    plt.xlim((0, 1.02))
    plt.ylim((-0.05, 1.05))
    plt.ylabel(r"$\bar{\alpha}_{t}$    ", fontsize=35, rotation=0)  # make it horizontal
    plt.xlabel('t', fontsize=30)
    plt.yticks(fontsize=25)
    plt.xticks(fontsize=25)
    # order = 1, steps = 10, skip_type = 'time_uniform'
    # ab: alpha_bar
    # ab_ori = [0.895328, 0.656884, 0.394732, 0.194200, 0.078190,
    #           0.025754, 0.006936, 0.001527, 0.000274, 0.000040, ]
    # ab_new = [0.905291, 0.673222, 0.411267, 0.206440, 0.085181,
    #           0.028907, 0.008075, 0.001858, 0.000353, 0.000055, ]
    # ts_ori = [0.099, 0.199, 0.299, 0.399, 0.499, 0.599, 0.699, 0.799, 0.899, 0.998]
    # ts_new = [0.094, 0.193, 0.292, 0.391, 0.490, 0.589, 0.688, 0.786, 0.885, 0.983]

    # order = 2, steps = 10, skip_type = 'time_quadratic'
    ab_ori = [0.995807, 0.970207, 0.889866, 0.723901, 0.481753,
              0.236788, 0.075947, 0.013741, 0.001185, 0.000040, ]
    ab_new = [0.991715, 0.956561, 0.868078, 0.697690, 0.457511,
              0.220373, 0.068510, 0.012959, 0.001219, 0.000054, ]
    ts_ori = [0.015, 0.049, 0.102, 0.174, 0.265, 0.374, 0.502, 0.649, 0.814, 0.998, ]
    ts_new = [0.023, 0.061, 0.113, 0.184, 0.274, 0.383, 0.512, 0.653, 0.813, 0.984, ]

    ax.plot(ts_ori, ab_ori, 'o', ms=10, color='blue')
    ax.plot(ts_new, ab_new, '*', ms=16, color='red')
    ax.plot(ts_ori, ab_ori, '--', ms=10, color='green')

    # add text. annotation for dot and star.
    ax.plot([0.48], [0.815], 'o', ms=10, color='blue')
    ax.text(0.5, 0.8, ': original trajectory', size=25)
    ax.plot([0.48], [0.715], '*', ms=16, color='red')
    ax.text(0.5, 0.7, ': improved trajectory', size=25)
    plt.show()
    fig.savefig('./configs/chart/abc_o2_s10_tq_v2.png')
    plt.close()

def merge_image():
    dir1 = './ckpt/2023-04-07_image_intermediate/bedroom_reverse_2_10_time_quadratic_new'
    dir2 = './ckpt/2023-04-07_image_intermediate/bedroom_reverse_2_10_time_quadratic_ori'
    dir3 = './ckpt/2023-04-07_image_intermediate/bedroom_reverse_2_10_time_quadratic_all'
    if not os.path.exists(dir3):
        print(f"mkdirs: {dir3}")
        os.makedirs(dir3)
    f_list = os.listdir(dir1)
    f_list.sort()  # file name list
    for fn in f_list:
        f1 = os.path.join(dir1, fn)
        f2 = os.path.join(dir2, fn)
        f3 = os.path.join(dir3, fn)
        i1, i2 = tv.io.read_image(f1), tv.io.read_image(f2)
        i1, i2 = i1.float(), i2.float()
        i1 /= 255.0
        i2 /= 255.0
        print(f"saving image: {f3}")
        tv.utils.save_image([i1, i2], f3, nrow=1)

def mse_error_vs_alpha_bar():
    mse_train = [1705.3052, 1490.751, 1357.769, 1259.209, 1180.147, 1113.053, 1055.815, 1005.528, 961.6980, 922.2376,
                 886.3626,  853.1224, 823.6397, 796.1513, 771.5246, 748.0213, 725.7368, 705.6533, 687.2634, 668.8577,
                 652.3686,  636.5029, 621.7116, 607.7314, 594.3815, 581.1665, 569.1201, 557.7317, 546.3212, 535.7988,
                 526.3934,  516.0354, 506.2507, 497.1383, 488.9288, 480.4435, 472.5754, 464.8413, 457.6023, 450.4096,
                 443.5321,  436.8423, 430.5373, 424.2699, 418.0489, 412.0598, 406.6159, 400.7833, 395.1656, 390.1971,
                 385.0297,  379.6522, 375.0673, 370.0567, 365.7768, 361.3683, 357.5555, 352.8554, 348.5974, 344.4448,
                 340.2772,  336.7190, 332.7570, 328.8578, 325.5562, 322.0782, 318.4112, 315.4662, 312.2982, 308.5296,
                 305.5826,  302.5058, 299.2368, 296.7647, 293.5805, 290.5803, 287.8286, 284.9799, 282.5154, 279.5815,
                 277.1923,  274.6056, 271.8127, 269.2436, 266.8705, 264.9790, 262.6287, 259.5336, 257.6445, 255.7327,
                 253.2283,  251.1605, 248.8405, 247.1809, 245.1223, 242.9071, 240.9020, 238.6637, 236.9742, 235.1563,
                 233.1047,  231.2142, 229.5569, 227.6611, 225.9228, 224.2408, 222.0648, 220.8499, 218.9794, 217.5237,
                 215.6276,  214.4675, 212.2608, 211.2312, 209.5897, 207.9467, 206.5449, 204.8998, 203.5736, 201.9733,
                 200.6272,  199.0281, 197.8833, 196.4148, 195.0383, 193.7037, 192.3497, 191.3696, 189.6585, 188.6138,
                 187.2588,  185.8104, 184.6033, 183.3989, 182.2334, 180.9580, 179.9383, 178.8401, 177.8477, 176.3954,
                 174.9611,  174.1767, 173.1423, 171.7789, 170.8738, 169.5992, 168.7716, 167.5242, 166.4832, 165.5540,
                 164.3672,  163.3144, 162.6938, 161.2135, 160.5441, 159.3985, 158.4887, 157.5202, 156.3539, 155.2134,
                 154.7291,  153.6995, 152.8994, 152.2177, 150.8117, 150.2221, 149.2547, 148.2679, 147.2931, 146.8859,
                 145.9328,  145.1746, 143.8815, 143.0784, 142.4243, 141.6891, 141.1239, 140.0489, 139.3714, 138.2265,
                 137.6741,  136.9887, 136.0607, 135.3512, 134.3541, 133.6739, 132.9657, 132.2595, 131.7923, 130.6665,
                 130.1509,  129.3978, 128.7098, 127.7371, 127.3843, 126.4210, 125.8299, 125.1344, 124.5666, 123.7103,
                 123.1872,  122.8112, 121.7882, 121.3710, 120.4093, 120.0775, 119.1173, 118.6743, 117.8459, 117.1546,
                 116.7661,  116.1730, 115.4415, 114.8156, 114.3402, 113.6634, 112.7953, 112.3872, 111.7422, 111.5167,
                 110.5641,  109.9418, 109.4167, 108.8275, 108.2795, 107.9979, 107.2655, 106.5904, 106.1220, 105.4803,
                 104.9201,  104.3856, 103.8021, 103.4547, 102.7982, 102.3114, 101.8574, 101.2055, 100.5852, 100.2613,
                 99.7880,   99.1088,  98.5425,  98.2047,  97.6593,  97.2044,  96.7800,  96.1823,  95.5994,  95.0609,
                 94.7589,   94.2668,  93.9356,  93.4147,  92.7418,  92.1927,  91.8088,  91.1356,  90.7743,  90.4670,
                 89.7975,   89.2281,  89.1319,  88.6145,  88.2058,  87.6820,  87.2445,  86.7831,  86.5592,  85.9622,
                 85.5060,   85.0054,  84.5894,  84.1799,  83.8106,  83.3989,  83.0173,  82.4999,  82.0417,  81.2653,
                 81.2808,   80.8565,  80.3103,  79.8974,  79.7311,  79.4685,  78.7124,  78.3692,  78.0367,  77.6269,
                 77.2734,   76.8840,  76.3997,  76.1165,  75.6622,  75.0944,  74.9530,  74.3371,  74.3220,  73.8984,
                 73.5931,   73.0424,  72.7156,  72.2662,  71.8400,  71.5151,  71.1261,  70.9025,  70.6319,  70.0502,
                 69.8508,   69.1014,  69.1003,  68.8406,  68.4542,  68.0255,  67.5860,  67.1134,  66.9351,  66.6637,
                 66.2207,   66.0162,  65.6299,  65.1595,  65.0152,  64.4956,  64.2421,  63.9557,  63.6129,  63.2795,
                 62.8452,   62.7248,  62.1553,  61.8995,  61.5551,  61.1821,  61.0390,  60.8323,  60.4939,  60.0583,
                 59.7300,   59.5000,  59.1240,  58.8828,  58.4195,  58.2287,  57.9792,  57.4583,  57.3090,  56.8279,
                 56.5400,   56.2844,  56.1274,  55.7306,  55.4490,  55.0650,  54.9266,  54.5190,  54.2934,  54.1284,
                 53.7494,   53.4853,  53.1171,  52.7800,  52.4800,  52.2412,  52.1112,  51.7029,  51.3073,  51.1136,
                 50.8783,   50.6329,  50.3606,  50.0936,  49.8246,  49.5731,  49.2575,  48.9859,  48.6540,  48.5090,
                 48.1911,   47.8937,  47.6356,  47.3534,  47.1068,  46.9312,  46.6893,  46.3831,  46.1534,  45.9448,
                 45.6155,   45.1919,  45.0898,  44.7300,  44.6251,  44.3876,  44.1818,  43.7717,  43.5999,  43.3299,
                 43.1016,   42.7425,  42.6224,  42.4013,  42.1593,  41.9861,  41.7675,  41.3717,  41.3062,  40.9605,
                 40.7425,   40.5288,  40.2482,  39.9561,  39.6078,  39.4857,  39.3279,  39.0591,  38.8684,  38.5279,
                 38.4205,   38.1757,  37.9486,  37.6957,  37.5541,  37.3968,  37.0005,  36.8150,  36.6904,  36.3720,
                 36.0993,   35.9364,  35.6778,  35.5192,  35.3905,  35.0816,  34.9033,  34.6816,  34.4329,  34.2499,
                 34.1554,   33.8467,  33.6169,  33.4850,  33.3221,  33.0967,  32.9200,  32.6799,  32.2654,  32.2300,
                 32.0742,   31.8131,  31.5737,  31.4439,  31.3028,  30.9707,  30.8816,  30.6562,  30.4944,  30.3117,
                 30.0670,   29.7857,  29.7729,  29.5308,  29.3334,  29.1710,  28.8725,  28.7110,  28.5622,  28.4895,
                 28.2315,   27.9791,  27.8540,  27.6635,  27.4547,  27.2645,  27.1394,  26.9090,  26.7632,  26.6655,
                 26.3945,   26.2840,  26.0380,  25.8927,  25.7174,  25.5010,  25.4538,  25.2507,  24.9989,  24.9146,
                 24.7076,   24.5101,  24.4064,  24.1638,  23.9779,  23.9133,  23.6527,  23.5553,  23.4321,  23.2572,
                 23.0916,   22.8914,  22.7866,  22.5256,  22.4829,  22.3053,  22.0151,  21.9661,  21.7823,  21.6602,
                 21.5542,   21.4092,  21.1979,  21.1186,  20.8794,  20.7735,  20.5936,  20.4771,  20.2109,  20.1177,
                 20.0373,   19.8644,  19.7863,  19.5815,  19.5352,  19.3412,  19.1337,  19.0215,  18.8967,  18.7244,
                 18.6209,   18.5130,  18.3634,  18.2401,  18.0478,  17.9159,  17.7692,  17.6391,  17.5045,  17.3314,
                 17.2776,   17.0462,  16.9875,  16.8460,  16.7033,  16.5932,  16.4773,  16.3641,  16.2631,  16.0627,
                 15.9077,   15.8264,  15.6880,  15.5711,  15.4351,  15.3735,  15.2356,  15.1440,  14.9958,  14.9071,
                 14.7987,   14.6219,  14.5455,  14.4000,  14.3279,  14.2387,  14.0416,  13.9980,  13.8611,  13.7467,
                 13.6220,   13.5127,  13.3533,  13.2665,  13.1749,  13.0431,  12.9252,  12.7903,  12.7747,  12.5972,
                 12.5234,   12.3913,  12.3456,  12.1978,  12.0667,  11.9872,  11.8891,  11.8044,  11.7197,  11.5707,
                 11.5069,   11.3609,  11.3017,  11.1925,  11.0829,  11.0349,  10.9110,  10.8116,  10.6885,  10.6080,
                 10.5097,   10.3895,  10.3698,  10.2470,  10.1835,  10.0406,   9.9988,   9.8740,   9.8244,   9.7626,
                 9.6746,    9.5265,   9.4777,   9.3428,   9.2805,   9.2192,   9.1162,   9.0257,   8.9442,   8.8571,
                 8.8033,    8.6783,   8.6282,   8.5601,   8.5016,   8.3815,   8.3250,   8.2468,   8.1347,   8.0871,
                 8.0090,    7.9260,   7.8260,   7.7631,   7.6698,   7.6261,   7.5226,   7.4656,   7.3805,   7.3327,
                 7.2780,    7.1562,   7.1322,   7.0521,   6.9706,   6.9255,   6.8230,   6.7577,   6.6908,   6.6331,
                 6.5475,    6.5074,   6.4429,   6.3536,   6.2998,   6.2350,   6.1930,   6.1146,   6.0626,   5.9859,
                 5.9490,    5.8717,   5.8143,   5.7384,   5.6807,   5.6592,   5.5733,   5.4847,   5.4663,   5.3975,
                 5.3406,    5.2669,   5.2209,   5.1822,   5.1358,   5.0757,   5.0218,   4.9419,   4.9161,   4.8511,
                 4.7959,    4.7468,   4.6944,   4.6639,   4.5952,   4.5509,   4.4910,   4.4641,   4.3970,   4.3181,
                 4.2961,    4.2472,   4.1973,   4.1602,   4.0988,   4.0561,   4.0121,   3.9860,   3.9282,   3.8668,
                 3.8278,    3.8096,   3.7524,   3.7088,   3.6546,   3.6081,   3.5748,   3.5301,   3.4875,   3.4438,
                 3.4156,    3.3904,   3.3387,   3.3110,   3.2779,   3.2200,   3.1829,   3.1543,   3.1064,   3.0871,
                 3.0319,    3.0032,   2.9609,   2.9311,   2.8902,   2.8703,   2.8185,   2.7919,   2.7621,   2.7262,
                 2.6834,    2.6456,   2.6236,   2.5809,   2.5499,   2.5353,   2.4908,   2.4593,   2.4248,   2.4127,
                 2.3570,    2.3430,   2.3093,   2.2847,   2.2549,   2.2303,   2.2040,   2.1728,   2.1403,   2.1183,
                 2.0746,    2.0598,   2.0302,   2.0020,   1.9753,   1.9500,   1.9311,   1.9014,   1.8737,   1.8540,
                 1.8303,    1.8133,   1.7846,   1.7690,   1.7401,   1.7202,   1.6929,   1.6726,   1.6482,   1.6256,
                 1.6098,    1.5783,   1.5644,   1.5412,   1.5216,   1.4949,   1.4727,   1.4525,   1.4336,   1.4202,
                 1.3965,    1.3793,   1.3589,   1.3382,   1.3218,   1.3019,   1.2904,   1.2681,   1.2452,   1.2260,
                 1.2216,    1.2043,   1.1792,   1.1614,   1.1445,   1.1316,   1.1168,   1.0972,   1.0847,   1.0655,
                 1.0544,    1.0372,   1.0191,   1.0066,   0.9883,   0.9772,   0.9592,   0.9515,   0.9359,   0.9224,
                 0.9113,    0.8933,   0.8835,   0.8640,   0.8579,   0.8443,   0.8297,   0.8194,   0.8091,   0.7955,
                 0.7828,    0.7699,   0.7583,   0.7480,   0.7361,   0.7268,   0.7133,   0.7029,   0.6918,   0.6838,
                 0.6711,    0.6617,   0.6523,   0.6446,   0.6323,   0.6222,   0.6146,   0.6051,   0.5962,   0.5850,
                 0.5750,    0.5679,   0.5565,   0.5493,   0.5428,   0.5331,   0.5255,   0.5161,   0.5093,   0.5021,
                 0.4926,    0.4854,   0.4777,   0.4716,   0.4646,   0.4545,   0.4498,   0.4432,   0.4356,   0.4294,
                 0.4214,    0.4138,   0.4087,   0.4018,   0.3950,   0.3899,   0.3835,   0.3764,   0.3731,   0.3649,
                 0.3585,    0.3539,   0.3484,   0.3427,   0.3378,   0.3314,   0.3262,   0.3210,   0.3176,   0.3126,
                 0.3059,    0.3018,   0.2968,   0.2914,   0.2876,   0.2825,   0.2789,   0.2745,   0.2700,   0.2659,
                 0.2610,    0.2561,   0.2524,   0.2487,   0.2441,   0.2403,   0.2366,   0.2328,   0.2291,   0.2252,
                 0.2214,    0.2180,   0.2142,   0.2111,   0.2081,   0.2049,   0.2015,   0.1980,   0.1954,   0.1918,
                 0.1887,    0.1862,   0.1829,   0.1807,   0.1777,   0.1746,   0.1721,   0.1694,   0.1667,   0.1642,
                 0.1612,    0.1592,   0.1564,   0.1540,   0.1521,   0.1494,   0.1471,   0.1447,   0.1428,   0.1400,
                 0.1376,    0.1356,   0.1335,   0.1317,   0.1297,   0.1279,   0.1258,   0.1241,   0.1218,   0.1198,
                 0.1183,    0.1168,   0.1153,   0.1135,   0.1118,   0.1099,   0.1080,   0.1067,   0.1050,   0.1035,
                 0.1015,    0.1000,   0.0985,   0.0969,   0.0955,   0.0942,   0.0926,   0.0913,   0.0901,   0.0890,
                 0.0880,    0.0870,   0.0861,   0.0848,   0.0835,   0.0821,   0.0806,   0.0802,   0.0788,   0.0775,
                 0.0763,    0.0755,   0.0742,   0.0732,   0.0725,   0.0711,   0.0704,   0.0697,   0.0689,   0.0679,
                 0.0671,    0.0662,   0.0652,   0.0644,   0.0632,   0.0626,   0.0617,   0.0612,   0.0606,   0.0594,
                 0.0590,    0.0581,   0.0576,   0.0570,   0.0562,   0.0555,   0.0549,   0.0545,   0.0539,   0.0534]
    mse_test  = [1705.305, 1490.751, 1357.769, 1259.209, 1180.147, 1113.052, 1055.814, 1005.528, 961.6980, 922.2376,
                 886.3626, 853.1224, 823.6397, 796.1513, 771.5246, 748.0213, 725.7368, 705.6533, 687.2634, 668.8577,
                 652.3686, 636.5029, 621.7116, 607.7314, 594.3815, 581.1665, 569.1201, 557.7317, 546.3212, 535.7988,
                 526.3934, 516.0354, 506.2507, 497.1383, 488.9288, 480.4435, 472.5754, 464.8413, 457.6023, 450.4096,
                 443.5321, 436.8423, 430.5373, 424.2699, 418.0489, 412.0598, 406.6159, 400.7833, 395.1656, 390.1971,
                 385.0297, 379.6522, 375.0673, 370.0567, 365.7768, 361.3683, 357.5555, 352.8554, 348.5974, 344.4448,
                 340.2772, 336.7190, 332.7570, 328.8578, 325.5562, 322.0782, 318.4112, 315.4662, 312.2982, 308.5296,
                 305.5826, 302.5058, 299.2368, 296.7647, 293.5805, 290.5803, 287.8286, 284.9799, 282.5154, 279.5815,
                 277.1923, 274.6056, 271.8127, 269.2436, 266.8705, 264.9790, 262.6287, 259.5336, 257.6445, 255.7327,
                 253.2283, 251.1605, 248.8405, 247.1809, 245.1223, 242.9071, 240.9020, 238.6637, 236.9742, 235.1563,
                 233.1047, 231.2142, 229.5569, 227.6611, 225.9228, 224.2408, 222.0648, 220.8499, 218.9794, 217.5237,
                 215.6276, 214.4675, 212.2608, 211.2312, 209.5897, 207.9467, 206.5449, 204.8998, 203.5736, 201.9733,
                 200.6272, 199.0281, 197.8833, 196.4148, 195.0383, 193.7037, 192.3497, 191.3696, 189.6585, 188.6138,
                 187.2588, 185.8104, 184.6033, 183.3989, 182.2334, 180.9580, 179.9383, 178.8401, 177.8477, 176.3954,
                 174.9611, 174.1767, 173.1423, 171.7789, 170.8738, 169.5992, 168.7716, 167.5242, 166.4832, 165.5540,
                 164.3672, 163.3144, 162.6938, 161.2135, 160.5441, 159.3985, 158.4887, 157.5202, 156.3539, 155.2134,
                 154.7291, 153.6995, 152.8994, 152.2177, 150.8117, 150.2221, 149.2547, 148.2679, 147.2931, 146.8859,
                 145.9328, 145.1746, 143.8815, 143.0784, 142.4243, 141.6891, 141.1239, 140.0489, 139.3714, 138.2265,
                 137.6741, 136.9887, 136.0607, 135.3512, 134.3541, 133.6739, 132.9657, 132.2595, 131.7923, 130.6665,
                 130.1509, 129.3978, 128.7098, 127.7371, 127.3843, 126.4210, 125.8299, 125.1344, 124.5666, 123.7103,
                 123.1872, 122.8112, 121.7882, 121.3710, 120.4093, 120.0775, 119.1173, 118.6743, 117.8459, 117.1546,
                 116.7661, 116.1730, 115.4415, 114.8156, 114.3402, 113.6634, 112.7953, 112.3872, 111.7422, 111.5167,
                 110.5641, 109.9418, 109.4167, 108.8275, 108.2795, 107.9979, 107.2655, 106.5904, 106.1220, 105.4803,
                 104.9201, 104.3856, 103.8021, 103.4547, 102.7982, 102.3114, 101.8574, 101.2055, 100.5852, 100.2613,
                 99.7880,  99.1088,  98.5425,  98.2047,  97.6593,  97.2044,  96.7800,  96.1823,  95.5994,  95.0609,
                 94.7589,  94.2668,  93.9356,  93.4147,  92.7418,  92.1927,  91.8088,  91.1356,  90.7743,  90.4670,
                 89.7975,  89.2281,  89.1319,  88.6145,  88.2058,  87.6820,  87.2445,  86.7831,  86.5592,  85.9622,
                 85.5060,  85.0054,  84.5894,  84.1799,  83.8106,  83.3989,  83.0173,  82.4999,  82.0417,  81.2653,
                 81.2808,  80.8565,  80.3103,  79.8974,  79.7311,  79.4685,  78.7124,  78.3692,  78.0367,  77.6269,
                 77.2734,  76.8840,  76.3997,  76.1165,  75.6622,  75.0944,  74.9530,  74.3371,  74.3220,  73.8984,
                 73.5931,  73.0424,  72.7156,  72.2662,  71.8400,  71.5151,  71.1261,  70.9025,  70.6319,  70.0502,
                 69.8508,  69.1014,  69.1003,  68.8406,  68.4542,  68.0255,  67.5860,  67.1134,  66.9351,  66.6637,
                 66.2207,  66.0162,  65.6299,  65.1595,  65.0152,  64.4956,  64.2421,  63.9557,  63.6129,  63.2795,
                 62.8452,  62.7248,  62.1553,  61.8995,  61.5551,  61.1821,  61.0390,  60.8323,  60.4939,  60.0583,
                 59.7300,  59.5000,  59.1240,  58.8828,  58.4195,  58.2287,  57.9792,  57.4583,  57.3090,  56.8279,
                 56.5400,  56.2844,  56.1274,  55.7306,  55.4490,  55.0650,  54.9266,  54.5190,  54.2934,  54.1284,
                 53.7494,  53.4853,  53.1171,  52.7800,  52.4800,  52.2412,  52.1112,  51.7029,  51.3073,  51.1136,
                 50.8783,  50.6329,  50.3606,  50.0936,  49.8246,  49.5731,  49.2575,  48.9859,  48.6540,  48.5090,
                 48.1911,  47.8937,  47.6356,  47.3534,  47.1068,  46.9312,  46.6893,  46.3831,  46.1534,  45.9448,
                 45.6155,  45.1919,  45.0898,  44.7300,  44.6251,  44.3876,  44.1818,  43.7717,  43.5999,  43.3299,
                 43.1016,  42.7425,  42.6224,  42.4013,  42.1593,  41.9861,  41.7675,  41.3717,  41.3062,  40.9605,
                 40.7425,  40.5288,  40.2482,  39.9561,  39.6078,  39.4857,  39.3279,  39.0591,  38.8684,  38.5279,
                 38.4205,  38.1757,  37.9486,  37.6957,  37.5541,  37.3968,  37.0005,  36.8150,  36.6904,  36.3720,
                 36.0993,  35.9364,  35.6778,  35.5192,  35.3905,  35.0816,  34.9033,  34.6816,  34.4329,  34.2499,
                 34.1554,  33.8467,  33.6169,  33.4850,  33.3221,  33.0967,  32.9200,  32.6799,  32.2654,  32.2300,
                 32.0742,  31.8131,  31.5737,  31.4439,  31.3028,  30.9707,  30.8816,  30.6562,  30.4944,  30.3117,
                 30.0670,  29.7857,  29.7729,  29.5308,  29.3334,  29.1710,  28.8725,  28.7110,  28.5622,  28.4895,
                 28.2315,  27.9791,  27.8540,  27.6635,  27.4547,  27.2645,  27.1394,  26.9090,  26.7632,  26.6655,
                 26.3945,  26.2840,  26.0380,  25.8927,  25.7174,  25.5010,  25.4538,  25.2507,  24.9989,  24.9146,
                 24.7076,  24.5101,  24.4064,  24.1638,  23.9779,  23.9133,  23.6527,  23.5553,  23.4321,  23.2572,
                 23.0916,  22.8914,  22.7866,  22.5256,  22.4829,  22.3053,  22.0151,  21.9661,  21.7823,  21.6602,
                 21.5542,  21.4092,  21.1979,  21.1186,  20.8794,  20.7735,  20.5936,  20.4771,  20.2109,  20.1177,
                 20.0373,  19.8644,  19.7863,  19.5815,  19.5352,  19.3412,  19.1337,  19.0215,  18.8967,  18.7244,
                 18.6209,  18.5130,  18.3634,  18.2401,  18.0478,  17.9159,  17.7692,  17.6391,  17.5045,  17.3314,
                 17.2776,  17.0462,  16.9875,  16.8460,  16.7033,  16.5932,  16.4773,  16.3641,  16.2631,  16.0627,
                 15.9077,  15.8264,  15.6880,  15.5711,  15.4351,  15.3735,  15.2356,  15.1440,  14.9958,  14.9071,
                 14.7987,  14.6219,  14.5455,  14.4000,  14.3279,  14.2387,  14.0416,  13.9980,  13.8611,  13.7467,
                 13.6220,  13.5127,  13.3533,  13.2665,  13.1749,  13.0431,  12.9252,  12.7903,  12.7747,  12.5972,
                 12.5234,  12.3913,  12.3456,  12.1978,  12.0667,  11.9872,  11.8891,  11.8044,  11.7197,  11.5707,
                 11.5069,  11.3609,  11.3017,  11.1925,  11.0829,  11.0349,  10.9110,  10.8116,  10.6885,  10.6080,
                 10.5097,  10.3895,  10.3698,  10.2470,  10.1835,  10.0406,  9.9988,   9.8740,   9.8244,   9.7626,
                 9.6746,   9.5265,   9.4777,   9.3428,   9.2805,   9.2192,   9.1162,   9.0257,   8.9442,   8.8571,
                 8.8033,   8.6783,   8.6282,   8.5601,   8.5016,   8.3815,   8.3250,   8.2468,   8.1347,   8.0871,
                 8.0090,   7.9260,   7.8260,   7.7631,   7.6698,   7.6261,   7.5226,   7.4656,   7.3805,   7.3327,
                 7.2780,   7.1562,   7.1322,   7.0521,   6.9706,   6.9255,   6.8230,   6.7577,   6.6908,   6.6331,
                 6.5475,   6.5074,   6.4429,   6.3536,   6.2998,   6.2350,   6.1930,   6.1146,   6.0626,   5.9859,
                 5.9490,   5.8717,   5.8143,   5.7384,   5.6807,   5.6592,   5.5733,   5.4847,   5.4663,   5.3975,
                 5.3406,   5.2669,   5.2209,   5.1822,   5.1358,   5.0757,   5.0218,   4.9419,   4.9161,   4.8511,
                 4.7959,   4.7468,   4.6944,   4.6639,   4.5952,   4.5509,   4.4910,   4.4641,   4.3970,   4.3181,
                 4.2961,   4.2472,   4.1973,   4.1602,   4.0988,   4.0561,   4.0121,   3.9860,   3.9282,   3.8668,
                 3.8278,   3.8096,   3.7524,   3.7088,   3.6546,   3.6081,   3.5748,   3.5301,   3.4875,   3.4438,
                 3.4156,   3.3904,   3.3387,   3.3110,   3.2779,   3.2200,   3.1829,   3.1543,   3.1064,   3.0871,
                 3.0319,   3.0032,   2.9609,   2.9311,   2.8902,   2.8703,   2.8185,   2.7919,   2.7621,   2.7262,
                 2.6834,   2.6456,   2.6236,   2.5809,   2.5499,   2.5353,   2.4908,   2.4593,   2.4248,   2.4127,
                 2.3570,   2.3430,   2.3093,   2.2847,   2.2549,   2.2303,   2.2040,   2.1728,   2.1403,   2.1183,
                 2.0746,   2.0598,   2.0302,   2.0020,   1.9753,   1.9500,   1.9311,   1.9014,   1.8737,   1.8540,
                 1.8303,   1.8133,   1.7846,   1.7690,   1.7401,   1.7202,   1.6929,   1.6726,   1.6482,   1.6256,
                 1.6098,   1.5783,   1.5644,   1.5412,   1.5216,   1.4949,   1.4727,   1.4525,   1.4336,   1.4202,
                 1.3965,   1.3793,   1.3589,   1.3382,   1.3218,   1.3019,   1.2904,   1.2681,   1.2452,   1.2260,
                 1.2216,   1.2043,   1.1792,   1.1614,   1.1445,   1.1316,   1.1168,   1.0972,   1.0847,   1.0655,
                 1.0544,   1.0372,   1.0191,   1.0066,   0.9883,   0.9772,   0.9592,   0.9515,   0.9359,   0.9224,
                 0.9113,   0.8933,   0.8835,   0.8640,   0.8579,   0.8443,   0.8297,   0.8194,   0.8091,   0.7955,
                 0.7828,   0.7699,   0.7583,   0.7480,   0.7361,   0.7268,   0.7133,   0.7029,   0.6918,   0.6838,
                 0.6711,   0.6617,   0.6523,   0.6446,   0.6323,   0.6222,   0.6146,   0.6051,   0.5962,   0.5850,
                 0.5750,   0.5679,   0.5565,   0.5493,   0.5428,   0.5331,   0.5255,   0.5161,   0.5093,   0.5021,
                 0.4926,   0.4854,   0.4777,   0.4716,   0.4646,   0.4545,   0.4498,   0.4432,   0.4356,   0.4294,
                 0.4214,   0.4138,   0.4087,   0.4018,   0.3950,   0.3899,   0.3835,   0.3764,   0.3731,   0.3649,
                 0.3585,   0.3539,   0.3484,   0.3427,   0.3378,   0.3314,   0.3262,   0.3210,   0.3176,   0.3126,
                 0.3059,   0.3018,   0.2968,   0.2914,   0.2876,   0.2825,   0.2789,   0.2745,   0.2700,   0.2659,
                 0.2610,   0.2561,   0.2524,   0.2487,   0.2441,   0.2403,   0.2366,   0.2328,   0.2291,   0.2252,
                 0.2214,   0.2180,   0.2142,   0.2111,   0.2081,   0.2049,   0.2015,   0.1980,   0.1954,   0.1918,
                 0.1887,   0.1862,   0.1829,   0.1807,   0.1777,   0.1746,   0.1721,   0.1694,   0.1667,   0.1642,
                 0.1612,   0.1592,   0.1564,   0.1540,   0.1521,   0.1494,   0.1471,   0.1447,   0.1428,   0.1400,
                 0.1376,   0.1356,   0.1335,   0.1317,   0.1297,   0.1279,   0.1258,   0.1241,   0.1218,   0.1198,
                 0.1183,   0.1168,   0.1153,   0.1135,   0.1118,   0.1099,   0.1080,   0.1067,   0.1050,   0.1035,
                 0.1015,   0.1000,   0.0985,   0.0969,   0.0955,   0.0942,   0.0926,   0.0913,   0.0901,   0.0890,
                 0.0880,   0.0870,   0.0861,   0.0848,   0.0835,   0.0821,   0.0806,   0.0802,   0.0788,   0.0775,
                 0.0763,   0.0755,   0.0742,   0.0732,   0.0725,   0.0711,   0.0704,   0.0697,   0.0689,   0.0679,
                 0.0671,   0.0662,   0.0652,   0.0644,   0.0632,   0.0626,   0.0617,   0.0612,   0.0606,   0.0594,
                 0.0590,   0.0581,   0.0576,   0.0570,   0.0562,   0.0555,   0.0549,   0.0545,   0.0539,   0.0534,]
    alpha_bar = [0.999900, 0.999780, 0.999640, 0.999481, 0.999301, 0.999102, 0.998882, 0.998643, 0.998384, 0.998105,
                 0.997807, 0.997488, 0.997150, 0.996792, 0.996414, 0.996017, 0.995600, 0.995163, 0.994707, 0.994231,
                 0.993735, 0.993220, 0.992686, 0.992131, 0.991558, 0.990965, 0.990353, 0.989721, 0.989070, 0.988400,
                 0.987710, 0.987002, 0.986274, 0.985527, 0.984761, 0.983976, 0.983172, 0.982349, 0.981507, 0.980646,
                 0.979767, 0.978869, 0.977952, 0.977016, 0.976062, 0.975090, 0.974099, 0.973089, 0.972062, 0.971016,
                 0.969951, 0.968869, 0.967768, 0.966650, 0.965514, 0.964359, 0.963187, 0.961997, 0.960789, 0.959564,
                 0.958321, 0.957061, 0.955783, 0.954488, 0.953176, 0.951846, 0.950500, 0.949136, 0.947756, 0.946358,
                 0.944944, 0.943513, 0.942065, 0.940601, 0.939121, 0.937624, 0.936110, 0.934581, 0.933035, 0.931474,
                 0.929896, 0.928303, 0.926694, 0.925069, 0.923428, 0.921773, 0.920101, 0.918415, 0.916713, 0.914996,
                 0.913264, 0.911517, 0.909756, 0.907979, 0.906188, 0.904383, 0.902563, 0.900729, 0.898880, 0.897018,
                 0.895141, 0.893251, 0.891347, 0.889429, 0.887497, 0.885552, 0.883594, 0.881622, 0.879637, 0.877639,
                 0.875629, 0.873605, 0.871569, 0.869520, 0.867458, 0.865384, 0.863298, 0.861200, 0.859089, 0.856967,
                 0.854832, 0.852687, 0.850529, 0.848360, 0.846180, 0.843988, 0.841785, 0.839572, 0.837347, 0.835112,
                 0.832865, 0.830609, 0.828342, 0.826064, 0.823777, 0.821479, 0.819171, 0.816854, 0.814527, 0.812190,
                 0.809844, 0.807488, 0.805123, 0.802750, 0.800367, 0.797975, 0.795574, 0.793165, 0.790747, 0.788321,
                 0.785887, 0.783444, 0.780994, 0.778536, 0.776069, 0.773596, 0.771114, 0.768626, 0.766130, 0.763626,
                 0.761116, 0.758599, 0.756075, 0.753545, 0.751008, 0.748464, 0.745914, 0.743358, 0.740797, 0.738229,
                 0.735655, 0.733075, 0.730490, 0.727900, 0.725304, 0.722703, 0.720097, 0.717486, 0.714871, 0.712250,
                 0.709625, 0.706995, 0.704362, 0.701724, 0.699081, 0.696435, 0.693785, 0.691131, 0.688474, 0.685813,
                 0.683149, 0.680481, 0.677811, 0.675137, 0.672461, 0.669782, 0.667099, 0.664415, 0.661728, 0.659039,
                 0.656347, 0.653654, 0.650958, 0.648261, 0.645561, 0.642861, 0.640158, 0.637455, 0.634750, 0.632044,
                 0.629336, 0.626628, 0.623919, 0.621210, 0.618500, 0.615789, 0.613078, 0.610366, 0.607655, 0.604943,
                 0.602232, 0.599520, 0.596809, 0.594098, 0.591388, 0.588678, 0.585969, 0.583261, 0.580554, 0.577847,
                 0.575142, 0.572438, 0.569735, 0.567034, 0.564334, 0.561636, 0.558940, 0.556245, 0.553552, 0.550861,
                 0.548173, 0.545486, 0.542802, 0.540120, 0.537441, 0.534764, 0.532090, 0.529419, 0.526751, 0.524085,
                 0.521423, 0.518764, 0.516108, 0.513455, 0.510806, 0.508160, 0.505518, 0.502880, 0.500245, 0.497614,
                 0.494987, 0.492364, 0.489745, 0.487130, 0.484520, 0.481914, 0.479312, 0.476715, 0.474122, 0.471534,
                 0.468951, 0.466372, 0.463799, 0.461230, 0.458667, 0.456108, 0.453555, 0.451007, 0.448464, 0.445927,
                 0.443395, 0.440869, 0.438348, 0.435833, 0.433324, 0.430821, 0.428324, 0.425832, 0.423346, 0.420867,
                 0.418394, 0.415926, 0.413466, 0.411011, 0.408563, 0.406121, 0.403686, 0.401257, 0.398835, 0.396420,
                 0.394011, 0.391609, 0.389214, 0.386826, 0.384445, 0.382071, 0.379704, 0.377344, 0.374991, 0.372645,
                 0.370307, 0.367976, 0.365652, 0.363335, 0.361027, 0.358725, 0.356431, 0.354145, 0.351866, 0.349595,
                 0.347331, 0.345076, 0.342828, 0.340588, 0.338356, 0.336131, 0.333915, 0.331706, 0.329506, 0.327314,
                 0.325129, 0.322953, 0.320785, 0.318625, 0.316473, 0.314329, 0.312194, 0.310067, 0.307949, 0.305838,
                 0.303736, 0.301643, 0.299558, 0.297481, 0.295413, 0.293353, 0.291302, 0.289259, 0.287225, 0.285200,
                 0.283183, 0.281174, 0.279175, 0.277184, 0.275201, 0.273228, 0.271263, 0.269307, 0.267359, 0.265420,
                 0.263490, 0.261569, 0.259657, 0.257754, 0.255859, 0.253973, 0.252096, 0.250228, 0.248368, 0.246518,
                 0.244676, 0.242844, 0.241020, 0.239205, 0.237399, 0.235602, 0.233814, 0.232034, 0.230264, 0.228503,
                 0.226750, 0.225007, 0.223272, 0.221546, 0.219829, 0.218121, 0.216422, 0.214732, 0.213051, 0.211379,
                 0.209716, 0.208061, 0.206416, 0.204779, 0.203152, 0.201533, 0.199923, 0.198322, 0.196730, 0.195146,
                 0.193572, 0.192006, 0.190450, 0.188902, 0.187363, 0.185832, 0.184311, 0.182798, 0.181294, 0.179799,
                 0.178313, 0.176835, 0.175366, 0.173906, 0.172454, 0.171011, 0.169577, 0.168152, 0.166735, 0.165326,
                 0.163927, 0.162535, 0.161153, 0.159779, 0.158413, 0.157056, 0.155708, 0.154368, 0.153036, 0.151713,
                 0.150399, 0.149092, 0.147794, 0.146505, 0.145224, 0.143951, 0.142686, 0.141430, 0.140182, 0.138942,
                 0.137710, 0.136487, 0.135271, 0.134064, 0.132865, 0.131674, 0.130491, 0.129316, 0.128149, 0.126990,
                 0.125839, 0.124696, 0.123561, 0.122433, 0.121314, 0.120202, 0.119098, 0.118002, 0.116914, 0.115833,
                 0.114760, 0.113695, 0.112637, 0.111587, 0.110544, 0.109509, 0.108482, 0.107462, 0.106449, 0.105444,
                 0.104447, 0.103456, 0.102473, 0.101497, 0.100529, 0.099568, 0.098614, 0.097667, 0.096727, 0.095794,
                 0.094869, 0.093950, 0.093039, 0.092134, 0.091237, 0.090346, 0.089463, 0.088586, 0.087716, 0.086853,
                 0.085996, 0.085146, 0.084303, 0.083467, 0.082637, 0.081814, 0.080998, 0.080188, 0.079384, 0.078587,
                 0.077797, 0.077013, 0.076235, 0.075463, 0.074698, 0.073939, 0.073186, 0.072440, 0.071700, 0.070966,
                 0.070238, 0.069516, 0.068800, 0.068090, 0.067386, 0.066688, 0.065996, 0.065309, 0.064629, 0.063954,
                 0.063285, 0.062622, 0.061965, 0.061313, 0.060667, 0.060026, 0.059392, 0.058762, 0.058138, 0.057520,
                 0.056907, 0.056299, 0.055697, 0.055100, 0.054508, 0.053922, 0.053341, 0.052765, 0.052194, 0.051629,
                 0.051068, 0.050513, 0.049962, 0.049417, 0.048876, 0.048341, 0.047810, 0.047284, 0.046764, 0.046247,
                 0.045736, 0.045230, 0.044728, 0.044231, 0.043738, 0.043250, 0.042767, 0.042288, 0.041814, 0.041344,
                 0.040879, 0.040418, 0.039961, 0.039509, 0.039061, 0.038618, 0.038178, 0.037743, 0.037313, 0.036886,
                 0.036463, 0.036045, 0.035631, 0.035220, 0.034814, 0.034412, 0.034014, 0.033619, 0.033229, 0.032842,
                 0.032460, 0.032081, 0.031706, 0.031334, 0.030966, 0.030603, 0.030242, 0.029886, 0.029533, 0.029183,
                 0.028837, 0.028495, 0.028156, 0.027821, 0.027489, 0.027160, 0.026835, 0.026513, 0.026195, 0.025879,
                 0.025567, 0.025259, 0.024953, 0.024651, 0.024352, 0.024056, 0.023763, 0.023474, 0.023187, 0.022903,
                 0.022623, 0.022345, 0.022071, 0.021799, 0.021530, 0.021264, 0.021001, 0.020741, 0.020484, 0.020229,
                 0.019977, 0.019728, 0.019482, 0.019238, 0.018997, 0.018758, 0.018523, 0.018289, 0.018059, 0.017831,
                 0.017605, 0.017382, 0.017161, 0.016943, 0.016728, 0.016514, 0.016304, 0.016095, 0.015889, 0.015685,
                 0.015484, 0.015284, 0.015087, 0.014893, 0.014700, 0.014510, 0.014321, 0.014135, 0.013952, 0.013770,
                 0.013590, 0.013413, 0.013237, 0.013064, 0.012892, 0.012723, 0.012555, 0.012389, 0.012226, 0.012064,
                 0.011904, 0.011746, 0.011590, 0.011436, 0.011284, 0.011133, 0.010984, 0.010837, 0.010692, 0.010548,
                 0.010407, 0.010266, 0.010128, 0.009991, 0.009856, 0.009722, 0.009591, 0.009460, 0.009332, 0.009204,
                 0.009079, 0.008955, 0.008832, 0.008711, 0.008592, 0.008474, 0.008357, 0.008242, 0.008128, 0.008016,
                 0.007905, 0.007795, 0.007687, 0.007580, 0.007474, 0.007370, 0.007267, 0.007166, 0.007065, 0.006966,
                 0.006868, 0.006772, 0.006676, 0.006582, 0.006489, 0.006397, 0.006307, 0.006217, 0.006129, 0.006042,
                 0.005956, 0.005871, 0.005787, 0.005704, 0.005623, 0.005542, 0.005462, 0.005384, 0.005306, 0.005230,
                 0.005154, 0.005080, 0.005006, 0.004933, 0.004862, 0.004791, 0.004721, 0.004652, 0.004585, 0.004518,
                 0.004451, 0.004386, 0.004322, 0.004258, 0.004195, 0.004134, 0.004073, 0.004012, 0.003953, 0.003894,
                 0.003837, 0.003780, 0.003723, 0.003668, 0.003613, 0.003559, 0.003506, 0.003453, 0.003402, 0.003351,
                 0.003300, 0.003250, 0.003201, 0.003153, 0.003105, 0.003058, 0.003012, 0.002966, 0.002921, 0.002877,
                 0.002833, 0.002790, 0.002747, 0.002705, 0.002664, 0.002623, 0.002582, 0.002543, 0.002504, 0.002465,
                 0.002427, 0.002389, 0.002352, 0.002316, 0.002280, 0.002245, 0.002210, 0.002175, 0.002141, 0.002108,
                 0.002075, 0.002042, 0.002010, 0.001979, 0.001948, 0.001917, 0.001887, 0.001857, 0.001828, 0.001799,
                 0.001770, 0.001742, 0.001715, 0.001687, 0.001661, 0.001634, 0.001608, 0.001582, 0.001557, 0.001532,
                 0.001508, 0.001483, 0.001459, 0.001436, 0.001413, 0.001390, 0.001368, 0.001345, 0.001324, 0.001302,
                 0.001281, 0.001260, 0.001240, 0.001220, 0.001200, 0.001180, 0.001161, 0.001142, 0.001123, 0.001105,
                 0.001086, 0.001069, 0.001051, 0.001034, 0.001017, 0.001000, 0.000983, 0.000967, 0.000951, 0.000935,
                 0.000919, 0.000904, 0.000889, 0.000874, 0.000860, 0.000845, 0.000831, 0.000817, 0.000803, 0.000790,
                 0.000777, 0.000764, 0.000751, 0.000738, 0.000726, 0.000713, 0.000701, 0.000689, 0.000678, 0.000666,
                 0.000655, 0.000643, 0.000633, 0.000622, 0.000611, 0.000601, 0.000590, 0.000580, 0.000570, 0.000560,
                 0.000551, 0.000541, 0.000532, 0.000523, 0.000514, 0.000505, 0.000496, 0.000487, 0.000479, 0.000471,
                 0.000462, 0.000454, 0.000446, 0.000439, 0.000431, 0.000423, 0.000416, 0.000409, 0.000401, 0.000394,
                 0.000387, 0.000381, 0.000374, 0.000367, 0.000361, 0.000354, 0.000348, 0.000342, 0.000336, 0.000330,
                 0.000324, 0.000318, 0.000312, 0.000307, 0.000301, 0.000296, 0.000291, 0.000285, 0.000280, 0.000275,
                 0.000270, 0.000265, 0.000261, 0.000256, 0.000251, 0.000247, 0.000242, 0.000238, 0.000233, 0.000229,
                 0.000225, 0.000221, 0.000217, 0.000213, 0.000209, 0.000205, 0.000201, 0.000198, 0.000194, 0.000191,
                 0.000187, 0.000184, 0.000180, 0.000177, 0.000174, 0.000170, 0.000167, 0.000164, 0.000161, 0.000158,
                 0.000155, 0.000152, 0.000149, 0.000147, 0.000144, 0.000141, 0.000139, 0.000136, 0.000133, 0.000131,
                 0.000128, 0.000126, 0.000124, 0.000121, 0.000119, 0.000117, 0.000114, 0.000112, 0.000110, 0.000108,
                 0.000106, 0.000104, 0.000102, 0.000100, 0.000098, 0.000096, 0.000094, 0.000093, 0.000091, 0.000089,
                 0.000087, 0.000086, 0.000084, 0.000082, 0.000081, 0.000079, 0.000078, 0.000076, 0.000075, 0.000073,
                 0.000072, 0.000071, 0.000069, 0.000068, 0.000066, 0.000065, 0.000064, 0.000063, 0.000061, 0.000060,
                 0.000059, 0.000058, 0.000057, 0.000056, 0.000055, 0.000053, 0.000052, 0.000051, 0.000050, 0.000049,
                 0.000048, 0.000047, 0.000046, 0.000046, 0.000045, 0.000044, 0.000043, 0.000042, 0.000041, 0.000040]
    fig = plt.figure(figsize=(16, 9))
    ax = fig.add_subplot(111)
    plt.xlim((0, 1.02))
    # plt.ylim((0, 1800))
    plt.ylabel(r"$f_{\Delta}$    ", fontsize=35, rotation=0)  # make it horizontal
    plt.xlabel(r"$\bar{\alpha}$", fontsize=30)
    plt.yticks(fontsize=25)
    plt.xticks(fontsize=25)

    mse_train = [f / 3072 for f in mse_train]
    mse_test  = [f / 3072 for f in mse_test]
    ax.plot(alpha_bar, mse_train, linestyle='-', linewidth=8, color='c',
            label=r"$f_{\Delta}$ value on training dataset")
    ax.plot(alpha_bar, mse_test, linestyle='--', linewidth=4, color='r',
            label=r"$f_{\Delta}$ value on testing dataset")
    ax.legend(fontsize=25, loc='upper center')

    plt.show()
    f_path = './configs/chart/mse_error_vs_alpha_bar.png'
    fig.savefig(f_path, bbox_inches='tight')
    print(f"file: {f_path}")
    plt.close()

def fid_compare_ddim_cifar10():
    fid_log = [21.1, 12.7, 9.6, 8.0, 5.5, 4.7]    # logSNR
    fid_lo2 = [15.2,  9.2, 7.4, 7.2, 4.7, 4.1]    # logSNR + VRG
    fid_qua = [14.0,  8.9, 7.1, 6.1, 4.8, 4.3]    # quadratic
    fid_qu2 = [11.9,  7.9, 6.2, 5.7, 4.3, 3.8]    # quadratic + VRG
    fid_uni = [16.8, 10.7, 8.3, 7.1, 4.8, 4.0]    # uniform
    fid_un2 = [11.1,  7.7, 6.1, 5.8, 4.4, 3.8]    # uniform + VRG
    steps = ['10', '15', '20', '25', '50', '100']
    fig = plt.figure(figsize=(16, 6))
    ax1 = fig.add_subplot(1, 3, 1)
    ax2 = fig.add_subplot(1, 3, 2)
    ax3 = fig.add_subplot(1, 3, 3)
    # plt.xlim((0, 1.02))
    # plt.ylim((0, 1800))
    axs = [ax1, ax2, ax3]
    fid_arr = [[fid_log, fid_lo2], [fid_qua, fid_qu2], [fid_uni, fid_un2]]
    lbl_arr = [[s, f"{s}+VRG"] for s in ['logSNR', 'quadratic', 'uniform']]
    ylb_arr = [r"FID      ", '', '']    # y label on the left
    xlb_arr = ['', r"step count", '']   # x label in the middle
    for ax, fids, lbs, ylb, xlb in zip(axs, fid_arr, lbl_arr, ylb_arr, xlb_arr):
        ax.set_ylabel(ylb, fontsize=25, rotation=0)  # make it horizontal
        ax.set_xlabel(xlb, fontsize=25)
        ax.tick_params('both', labelsize=20)
        ax.plot(steps, fids[0], linestyle='-', color='c', marker='o', label=lbs[0])
        ax.plot(steps, fids[1], linestyle='-', color='r', marker='s', label=lbs[1])
        ax.legend(fontsize=18, loc='upper right')
    # for
    fig.suptitle("Compare with DDIM on CIFAR10", fontsize=30)
    plt.show()
    f_path = './configs/chart/fid_ddim_cifar10.png'
    fig.savefig(f_path, bbox_inches='tight')
    print(f"file saved: {f_path}")
    plt.close()

def fid_compare_ddim_bedroom():
    fid_log = [46.2, 29.5, 23.1]    # logSNR
    fid_lo2 = [43.1, 27.0, 20.9]    # logSNR + VRG
    fid_qua = [35.1, 23.2, 19.0]    # quadratic
    fid_qu2 = [34.1, 22.7, 18.8]    # quadratic + VRG
    fid_uni = [20.1, 13.4, 11.0]    # uniform
    fid_un2 = [18.6, 12.2, 10.7]    # uniform + VRG
    steps = ['10', '15', '20']
    fig = plt.figure(figsize=(16, 6))
    ax1 = fig.add_subplot(1, 3, 1)
    ax2 = fig.add_subplot(1, 3, 2)
    ax3 = fig.add_subplot(1, 3, 3)
    # plt.xlim((0, 1.02))
    # plt.ylim((0, 1800))
    axs = [ax1, ax2, ax3]
    fid_arr = [[fid_log, fid_lo2], [fid_qua, fid_qu2], [fid_uni, fid_un2]]
    lbl_arr = [[s, f"{s}+VRG"] for s in ['logSNR', 'quadratic', 'uniform']]
    ylb_arr = [r"FID      ", '', '']    # y label on the left
    xlb_arr = ['', r"step count", '']   # x label in the middle
    for ax, fids, lbs, ylb, xlb in zip(axs, fid_arr, lbl_arr, ylb_arr, xlb_arr):
        ax.set_ylabel(ylb, fontsize=25, rotation=0)  # make it horizontal
        ax.set_xlabel(xlb, fontsize=25)
        ax.tick_params('both', labelsize=20)
        ax.plot(steps, fids[0], linestyle='-', color='c', marker='o', label=lbs[0])
        ax.plot(steps, fids[1], linestyle='-', color='r', marker='s', label=lbs[1])
        ax.legend(fontsize=18, loc='upper right')
    # for
    fig.suptitle("Compare with DDIM on LSUN-bedroom", fontsize=30)
    plt.show()
    f_path = './configs/chart/fid_ddim_bedroom.png'
    fig.savefig(f_path, bbox_inches='tight')
    print(f"file saved: {f_path}")
    plt.close()

def fid_compare_ddim_celeba():
    fid_log = [18.1, 12.1, 9.7]     # logSNR
    fid_lo2 = [15.9, 10.8, 8.7]     # logSNR + VRG
    fid_qua = [28.9, 19.4, 14.5]    # quadratic
    fid_qu2 = [27.0, 16.2, 11.9]    # quadratic + VRG
    fid_uni = [15.4, 9.6, 7.1]      # uniform
    fid_un2 = [14.7, 9.2, 7.0]      # uniform + VRG
    steps = ['10', '15', '20']
    fig = plt.figure(figsize=(16, 6))
    ax1 = fig.add_subplot(1, 3, 1)
    ax2 = fig.add_subplot(1, 3, 2)
    ax3 = fig.add_subplot(1, 3, 3)
    # plt.xlim((0, 1.02))
    # plt.ylim((0, 1800))
    axs = [ax1, ax2, ax3]
    fid_arr = [[fid_log, fid_lo2], [fid_qua, fid_qu2], [fid_uni, fid_un2]]
    lbl_arr = [[s, f"{s}+VRG"] for s in ['logSNR', 'quadratic', 'uniform']]
    ylb_arr = [r"FID      ", '', '']    # y label on the left
    xlb_arr = ['', r"step count", '']   # x label in the middle
    for ax, fids, lbs, ylb, xlb in zip(axs, fid_arr, lbl_arr, ylb_arr, xlb_arr):
        ax.set_ylabel(ylb, fontsize=25, rotation=0)  # make it horizontal
        ax.set_xlabel(xlb, fontsize=25)
        ax.tick_params('both', labelsize=20)
        ax.plot(steps, fids[0], linestyle='-', color='c', marker='o', label=lbs[0])
        ax.plot(steps, fids[1], linestyle='-', color='r', marker='s', label=lbs[1])
        ax.legend(fontsize=18, loc='upper right')
    # for
    fig.suptitle("Compare with DDIM on CelebA", fontsize=30)
    plt.show()
    f_path = './configs/chart/fid_ddim_celeba.png'
    fig.savefig(f_path, bbox_inches='tight')
    print(f"file saved: {f_path}")
    plt.close()

def fid_compare_pndm_cifar10():
    fid_s  = [22.192, 9.7003, 6.8920, 5.6528]    # S-PNDM
    fid_s2 = [17.714, 6.7580, 4.6959, 4.0628]    # S-PNDM + VRG
    fid_f  = [18.623, 8.3909, 5.5028, 4.6607]    # F-PNDM
    fid_f2 = [12.465, 4.8597, 3.6508, 3.6243]    # F-PNDM + VRG
    steps = ['5', '10', '15', '20']
    fig = plt.figure(figsize=(16, 8))
    ax1 = fig.add_subplot(1, 2, 1)
    ax2 = fig.add_subplot(1, 2, 2)
    ax1.set_ylim((0, 23))
    ax2.set_ylim((0, 23))
    # plt.xlim((0, 1.02))
    # plt.ylim((0, 1800))
    axs = [ax1, ax2]
    fid_arr = [[fid_s, fid_s2], [fid_f, fid_f2]]
    lbl_arr = [[s, f"{s}+VRG"] for s in ['S-PNDM', 'F-PNDM']]
    for ax, fids, lbs in zip(axs, fid_arr, lbl_arr):
        ax.tick_params('both', labelsize=20)
        ax.plot(steps, fids[0], linestyle='-', color='c', marker='o', label=lbs[0])
        ax.plot(steps, fids[1], linestyle='-', color='r', marker='s', label=lbs[1])
        ax.legend(fontsize=20, loc='upper right')
    # for
    fig.supxlabel('step count', fontsize=25)
    fig.supylabel('   FID', fontsize=25, rotation=0)
    fig.suptitle("Compare with PNDM on CIFAR10", fontsize=30)
    plt.show()
    f_path = './configs/chart/fid_pndm_cifar10.png'
    fig.savefig(f_path, bbox_inches='tight')
    print(f"file saved: {f_path}")
    plt.close()

def fid_compare_splitnm_imagenet():
    fid_c64_old  = [220.4, 151.2, 134.4, 116.7, 46.97]  # conditional 64*64, original trajectory
    fid_c64_new  = [28.19, 13.57, 10.64, 9.286, 6.252]  # conditional 64*64, new trajectory
    fid_c128_old = [73.06, 59.44, 51.05, 51.33, 53.00]
    fid_c128_new = [71.79, 57.55, 50.53, 50.76, 52.89]
    steps = ['10', '15', '20', '25', '50']
    fig = plt.figure(figsize=(16, 8))
    ax1 = fig.add_subplot(1, 2, 1)
    ax2 = fig.add_subplot(1, 2, 2)
    axs = [ax1, ax2]
    fid_arr = [[fid_c64_old, fid_c64_new], [fid_c128_old, fid_c128_new]]
    ttl_arr = ['image size: 64*64', 'image size: 128*128']
    lbl_arr = ['STSP', 'STSP+VRG']
    for ax, fids, ttl in zip(axs, fid_arr, ttl_arr):
        ax.tick_params('both', labelsize=20)
        ax.plot(steps, fids[0], linestyle='-', color='c', marker='o')
        ax.plot(steps, fids[1], linestyle='-', color='r', marker='s')
        ax.legend(lbl_arr, fontsize=20, loc='upper right')
        ax.set_title(ttl, fontsize=25)
    # for
    fig.supylabel('  FID', fontsize=25, rotation=0)  # make it horizontal
    fig.supxlabel('step count', fontsize=25)
    fig.suptitle("Compare with SplitNM on ImageNet", fontsize=30)
    plt.show()
    f_path = './configs/chart/fid_splitnm_imagenet.png'
    fig.savefig(f_path, bbox_inches='tight')
    print(f"file saved: {f_path}")
    plt.close()

def fig_trajectory_compare_all3():
    fig = plt.figure(figsize=(12, 7))
    ax_arr = fig.add_subplot(311), fig.add_subplot(312), fig.add_subplot(313)
    ab_log_ori = [0.999309, 0.995248, 0.968069, 0.814417, 0.388457, 0.084202, 0.013133, 0.001922, 0.000278, 0.000040]
    ts_log_ori = [0.003, 0.016, 0.051, 0.138, 0.302, 0.492, 0.652, 0.784, 0.898, 0.998]
    ab_log_new = [0.998924, 0.995163, 0.977908, 0.832462, 0.405384, 0.091924, 0.015257, 0.002386, 0.000370, 0.000057]
    ts_log_new = [0.005, 0.017, 0.042, 0.130, 0.295, 0.483, 0.641, 0.771, 0.882, 0.981]
    ab_qua_ori = [0.995807, 0.970207, 0.889866, 0.723901, 0.481753, 0.236788, 0.075947, 0.013741, 0.001185, 0.000040]
    ts_qua_ori = [0.015, 0.049, 0.102, 0.174, 0.265, 0.374, 0.502, 0.649, 0.814, 0.998]
    ab_qua_new = [0.996924, 0.981219, 0.909756, 0.749162, 0.506046, 0.253784, 0.083935, 0.016025, 0.001543, 0.000068]
    ts_qua_new = [0.012, 0.038, 0.091, 0.164, 0.255, 0.365, 0.492, 0.637, 0.798, 0.972]
    ab_uni_ori = [0.895328, 0.656884, 0.394732, 0.194200, 0.078190, 0.025754, 0.006936, 0.001527, 0.000274, 0.000040]
    ts_uni_ori = [0.099, 0.199, 0.299, 0.399, 0.499, 0.599, 0.699, 0.799, 0.899, 0.998]
    ab_uni_new = [0.905291, 0.673222, 0.411267, 0.206440, 0.085181, 0.028907, 0.008075, 0.001858, 0.000353, 0.000055]
    ts_uni_new = [0.094, 0.193, 0.292, 0.391, 0.490, 0.589, 0.688, 0.786, 0.885, 0.983]
    ab_all = [0.999900, 0.999780, 0.999640, 0.999481, 0.999301, 0.999102, 0.998882, 0.998643, 0.998384, 0.998105,
              0.997807, 0.997488, 0.997150, 0.996792, 0.996414, 0.996017, 0.995600, 0.995163, 0.994707, 0.994231,
              0.993735, 0.993220, 0.992686, 0.992131, 0.991558, 0.990965, 0.990353, 0.989721, 0.989070, 0.988400,
              0.987710, 0.987002, 0.986274, 0.985527, 0.984761, 0.983976, 0.983172, 0.982349, 0.981507, 0.980646,
              0.979767, 0.978869, 0.977952, 0.977016, 0.976062, 0.975090, 0.974099, 0.973089, 0.972062, 0.971016,
              0.969951, 0.968869, 0.967768, 0.966650, 0.965514, 0.964359, 0.963187, 0.961997, 0.960789, 0.959564,
              0.958321, 0.957061, 0.955783, 0.954488, 0.953176, 0.951846, 0.950500, 0.949136, 0.947756, 0.946358,
              0.944944, 0.943513, 0.942065, 0.940601, 0.939121, 0.937624, 0.936110, 0.934581, 0.933035, 0.931474,
              0.929896, 0.928303, 0.926694, 0.925069, 0.923428, 0.921773, 0.920101, 0.918415, 0.916713, 0.914996,
              0.913264, 0.911517, 0.909756, 0.907979, 0.906188, 0.904383, 0.902563, 0.900729, 0.898880, 0.897018,
              0.895141, 0.893251, 0.891347, 0.889429, 0.887497, 0.885552, 0.883594, 0.881622, 0.879637, 0.877639,
              0.875629, 0.873605, 0.871569, 0.869520, 0.867458, 0.865384, 0.863298, 0.861200, 0.859089, 0.856967,
              0.854832, 0.852687, 0.850529, 0.848360, 0.846180, 0.843988, 0.841785, 0.839572, 0.837347, 0.835112,
              0.832865, 0.830609, 0.828342, 0.826064, 0.823777, 0.821479, 0.819171, 0.816854, 0.814527, 0.812190,
              0.809844, 0.807488, 0.805123, 0.802750, 0.800367, 0.797975, 0.795574, 0.793165, 0.790747, 0.788321,
              0.785887, 0.783444, 0.780994, 0.778536, 0.776069, 0.773596, 0.771114, 0.768626, 0.766130, 0.763626,
              0.761116, 0.758599, 0.756075, 0.753545, 0.751008, 0.748464, 0.745914, 0.743358, 0.740797, 0.738229,
              0.735655, 0.733075, 0.730490, 0.727900, 0.725304, 0.722703, 0.720097, 0.717486, 0.714871, 0.712250,
              0.709625, 0.706995, 0.704362, 0.701724, 0.699081, 0.696435, 0.693785, 0.691131, 0.688474, 0.685813,
              0.683149, 0.680481, 0.677811, 0.675137, 0.672461, 0.669782, 0.667099, 0.664415, 0.661728, 0.659039,
              0.656347, 0.653654, 0.650958, 0.648261, 0.645561, 0.642861, 0.640158, 0.637455, 0.634750, 0.632044,
              0.629336, 0.626628, 0.623919, 0.621210, 0.618500, 0.615789, 0.613078, 0.610366, 0.607655, 0.604943,
              0.602232, 0.599520, 0.596809, 0.594098, 0.591388, 0.588678, 0.585969, 0.583261, 0.580554, 0.577847,
              0.575142, 0.572438, 0.569735, 0.567034, 0.564334, 0.561636, 0.558940, 0.556245, 0.553552, 0.550861,
              0.548173, 0.545486, 0.542802, 0.540120, 0.537441, 0.534764, 0.532090, 0.529419, 0.526751, 0.524085,
              0.521423, 0.518764, 0.516108, 0.513455, 0.510806, 0.508160, 0.505518, 0.502880, 0.500245, 0.497614,
              0.494987, 0.492364, 0.489745, 0.487130, 0.484520, 0.481914, 0.479312, 0.476715, 0.474122, 0.471534,
              0.468951, 0.466372, 0.463799, 0.461230, 0.458667, 0.456108, 0.453555, 0.451007, 0.448464, 0.445927,
              0.443395, 0.440869, 0.438348, 0.435833, 0.433324, 0.430821, 0.428324, 0.425832, 0.423346, 0.420867,
              0.418394, 0.415926, 0.413466, 0.411011, 0.408563, 0.406121, 0.403686, 0.401257, 0.398835, 0.396420,
              0.394011, 0.391609, 0.389214, 0.386826, 0.384445, 0.382071, 0.379704, 0.377344, 0.374991, 0.372645,
              0.370307, 0.367976, 0.365652, 0.363335, 0.361027, 0.358725, 0.356431, 0.354145, 0.351866, 0.349595,
              0.347331, 0.345076, 0.342828, 0.340588, 0.338356, 0.336131, 0.333915, 0.331706, 0.329506, 0.327314,
              0.325129, 0.322953, 0.320785, 0.318625, 0.316473, 0.314329, 0.312194, 0.310067, 0.307949, 0.305838,
              0.303736, 0.301643, 0.299558, 0.297481, 0.295413, 0.293353, 0.291302, 0.289259, 0.287225, 0.285200,
              0.283183, 0.281174, 0.279175, 0.277184, 0.275201, 0.273228, 0.271263, 0.269307, 0.267359, 0.265420,
              0.263490, 0.261569, 0.259657, 0.257754, 0.255859, 0.253973, 0.252096, 0.250228, 0.248368, 0.246518,
              0.244676, 0.242844, 0.241020, 0.239205, 0.237399, 0.235602, 0.233814, 0.232034, 0.230264, 0.228503,
              0.226750, 0.225007, 0.223272, 0.221546, 0.219829, 0.218121, 0.216422, 0.214732, 0.213051, 0.211379,
              0.209716, 0.208061, 0.206416, 0.204779, 0.203152, 0.201533, 0.199923, 0.198322, 0.196730, 0.195146,
              0.193572, 0.192006, 0.190450, 0.188902, 0.187363, 0.185832, 0.184311, 0.182798, 0.181294, 0.179799,
              0.178313, 0.176835, 0.175366, 0.173906, 0.172454, 0.171011, 0.169577, 0.168152, 0.166735, 0.165326,
              0.163927, 0.162535, 0.161153, 0.159779, 0.158413, 0.157056, 0.155708, 0.154368, 0.153036, 0.151713,
              0.150399, 0.149092, 0.147794, 0.146505, 0.145224, 0.143951, 0.142686, 0.141430, 0.140182, 0.138942,
              0.137710, 0.136487, 0.135271, 0.134064, 0.132865, 0.131674, 0.130491, 0.129316, 0.128149, 0.126990,
              0.125839, 0.124696, 0.123561, 0.122433, 0.121314, 0.120202, 0.119098, 0.118002, 0.116914, 0.115833,
              0.114760, 0.113695, 0.112637, 0.111587, 0.110544, 0.109509, 0.108482, 0.107462, 0.106449, 0.105444,
              0.104447, 0.103456, 0.102473, 0.101497, 0.100529, 0.099568, 0.098614, 0.097667, 0.096727, 0.095794,
              0.094869, 0.093950, 0.093039, 0.092134, 0.091237, 0.090346, 0.089463, 0.088586, 0.087716, 0.086853,
              0.085996, 0.085146, 0.084303, 0.083467, 0.082637, 0.081814, 0.080998, 0.080188, 0.079384, 0.078587,
              0.077797, 0.077013, 0.076235, 0.075463, 0.074698, 0.073939, 0.073186, 0.072440, 0.071700, 0.070966,
              0.070238, 0.069516, 0.068800, 0.068090, 0.067386, 0.066688, 0.065996, 0.065309, 0.064629, 0.063954,
              0.063285, 0.062622, 0.061965, 0.061313, 0.060667, 0.060026, 0.059392, 0.058762, 0.058138, 0.057520,
              0.056907, 0.056299, 0.055697, 0.055100, 0.054508, 0.053922, 0.053341, 0.052765, 0.052194, 0.051629,
              0.051068, 0.050513, 0.049962, 0.049417, 0.048876, 0.048341, 0.047810, 0.047284, 0.046764, 0.046247,
              0.045736, 0.045230, 0.044728, 0.044231, 0.043738, 0.043250, 0.042767, 0.042288, 0.041814, 0.041344,
              0.040879, 0.040418, 0.039961, 0.039509, 0.039061, 0.038618, 0.038178, 0.037743, 0.037313, 0.036886,
              0.036463, 0.036045, 0.035631, 0.035220, 0.034814, 0.034412, 0.034014, 0.033619, 0.033229, 0.032842,
              0.032460, 0.032081, 0.031706, 0.031334, 0.030966, 0.030603, 0.030242, 0.029886, 0.029533, 0.029183,
              0.028837, 0.028495, 0.028156, 0.027821, 0.027489, 0.027160, 0.026835, 0.026513, 0.026195, 0.025879,
              0.025567, 0.025259, 0.024953, 0.024651, 0.024352, 0.024056, 0.023763, 0.023474, 0.023187, 0.022903,
              0.022623, 0.022345, 0.022071, 0.021799, 0.021530, 0.021264, 0.021001, 0.020741, 0.020484, 0.020229,
              0.019977, 0.019728, 0.019482, 0.019238, 0.018997, 0.018758, 0.018523, 0.018289, 0.018059, 0.017831,
              0.017605, 0.017382, 0.017161, 0.016943, 0.016728, 0.016514, 0.016304, 0.016095, 0.015889, 0.015685,
              0.015484, 0.015284, 0.015087, 0.014893, 0.014700, 0.014510, 0.014321, 0.014135, 0.013952, 0.013770,
              0.013590, 0.013413, 0.013237, 0.013064, 0.012892, 0.012723, 0.012555, 0.012389, 0.012226, 0.012064,
              0.011904, 0.011746, 0.011590, 0.011436, 0.011284, 0.011133, 0.010984, 0.010837, 0.010692, 0.010548,
              0.010407, 0.010266, 0.010128, 0.009991, 0.009856, 0.009722, 0.009591, 0.009460, 0.009332, 0.009204,
              0.009079, 0.008955, 0.008832, 0.008711, 0.008592, 0.008474, 0.008357, 0.008242, 0.008128, 0.008016,
              0.007905, 0.007795, 0.007687, 0.007580, 0.007474, 0.007370, 0.007267, 0.007166, 0.007065, 0.006966,
              0.006868, 0.006772, 0.006676, 0.006582, 0.006489, 0.006397, 0.006307, 0.006217, 0.006129, 0.006042,
              0.005956, 0.005871, 0.005787, 0.005704, 0.005623, 0.005542, 0.005462, 0.005384, 0.005306, 0.005230,
              0.005154, 0.005080, 0.005006, 0.004933, 0.004862, 0.004791, 0.004721, 0.004652, 0.004585, 0.004518,
              0.004451, 0.004386, 0.004322, 0.004258, 0.004195, 0.004134, 0.004073, 0.004012, 0.003953, 0.003894,
              0.003837, 0.003780, 0.003723, 0.003668, 0.003613, 0.003559, 0.003506, 0.003453, 0.003402, 0.003351,
              0.003300, 0.003250, 0.003201, 0.003153, 0.003105, 0.003058, 0.003012, 0.002966, 0.002921, 0.002877,
              0.002833, 0.002790, 0.002747, 0.002705, 0.002664, 0.002623, 0.002582, 0.002543, 0.002504, 0.002465,
              0.002427, 0.002389, 0.002352, 0.002316, 0.002280, 0.002245, 0.002210, 0.002175, 0.002141, 0.002108,
              0.002075, 0.002042, 0.002010, 0.001979, 0.001948, 0.001917, 0.001887, 0.001857, 0.001828, 0.001799,
              0.001770, 0.001742, 0.001715, 0.001687, 0.001661, 0.001634, 0.001608, 0.001582, 0.001557, 0.001532,
              0.001508, 0.001483, 0.001459, 0.001436, 0.001413, 0.001390, 0.001368, 0.001345, 0.001324, 0.001302,
              0.001281, 0.001260, 0.001240, 0.001220, 0.001200, 0.001180, 0.001161, 0.001142, 0.001123, 0.001105,
              0.001086, 0.001069, 0.001051, 0.001034, 0.001017, 0.001000, 0.000983, 0.000967, 0.000951, 0.000935,
              0.000919, 0.000904, 0.000889, 0.000874, 0.000860, 0.000845, 0.000831, 0.000817, 0.000803, 0.000790,
              0.000777, 0.000764, 0.000751, 0.000738, 0.000726, 0.000713, 0.000701, 0.000689, 0.000678, 0.000666,
              0.000655, 0.000643, 0.000633, 0.000622, 0.000611, 0.000601, 0.000590, 0.000580, 0.000570, 0.000560,
              0.000551, 0.000541, 0.000532, 0.000523, 0.000514, 0.000505, 0.000496, 0.000487, 0.000479, 0.000471,
              0.000462, 0.000454, 0.000446, 0.000439, 0.000431, 0.000423, 0.000416, 0.000409, 0.000401, 0.000394,
              0.000387, 0.000381, 0.000374, 0.000367, 0.000361, 0.000354, 0.000348, 0.000342, 0.000336, 0.000330,
              0.000324, 0.000318, 0.000312, 0.000307, 0.000301, 0.000296, 0.000291, 0.000285, 0.000280, 0.000275,
              0.000270, 0.000265, 0.000261, 0.000256, 0.000251, 0.000247, 0.000242, 0.000238, 0.000233, 0.000229,
              0.000225, 0.000221, 0.000217, 0.000213, 0.000209, 0.000205, 0.000201, 0.000198, 0.000194, 0.000191,
              0.000187, 0.000184, 0.000180, 0.000177, 0.000174, 0.000170, 0.000167, 0.000164, 0.000161, 0.000158,
              0.000155, 0.000152, 0.000149, 0.000147, 0.000144, 0.000141, 0.000139, 0.000136, 0.000133, 0.000131,
              0.000128, 0.000126, 0.000124, 0.000121, 0.000119, 0.000117, 0.000114, 0.000112, 0.000110, 0.000108,
              0.000106, 0.000104, 0.000102, 0.000100, 0.000098, 0.000096, 0.000094, 0.000093, 0.000091, 0.000089,
              0.000087, 0.000086, 0.000084, 0.000082, 0.000081, 0.000079, 0.000078, 0.000076, 0.000075, 0.000073,
              0.000072, 0.000071, 0.000069, 0.000068, 0.000066, 0.000065, 0.000064, 0.000063, 0.000061, 0.000060,
              0.000059, 0.000058, 0.000057, 0.000056, 0.000055, 0.000053, 0.000052, 0.000051, 0.000050, 0.000049,
              0.000048, 0.000047, 0.000046, 0.000046, 0.000045, 0.000044, 0.000043, 0.000042, 0.000041, 0.000040]
    ts_all = list(range(len(ab_all)))
    ts_all = [(float(i))/1000.0 for i in ts_all]
    abo_arr = [ab_log_ori, ab_qua_ori, ab_uni_ori]
    tso_arr = [ts_log_ori, ts_qua_ori, ts_uni_ori]
    abn_arr = [ab_log_new, ab_qua_new, ab_uni_new]
    tsn_arr = [ts_log_new, ts_qua_new, ts_uni_new]
    ttl_arr = ['logSNR', 'quadratic', 'uniform']
    for ax, ab_ori, ts_ori, ab_new, ts_new, ttl in zip(ax_arr, abo_arr, tso_arr, abn_arr, tsn_arr, ttl_arr):
        ax.tick_params('both', labelsize=12)
        ax.set_xlim((0, 1.02))
        ax.set_ylim((-0.05, 1.05))
        ax.plot(ts_ori, ab_ori, 'o', ms=6, color='b')
        ax.plot(ts_new, ab_new, '*', ms=6, color='red')
        ax.plot(ts_all, ab_all, '--', color='green', linewidth=1)
        # why duplicate: the ax legend only follow the plot order, but we want marker cover line.
        ax.plot(ts_ori, ab_ori, 'o', ms=6, color='b')
        ax.plot(ts_new, ab_new, '*', ms=6, color='red')
        # add text. annotation for dot and star.
        # ax.plot([0.27], [0.855], 'o', ms=10, color='blue')
        # ax.text(0.29, 0.84, ': original trajectory', size=15)
        # ax.plot([0.27], [0.755], '*', ms=16, color='red')
        # ax.text(0.29, 0.74, ': improved trajectory', size=15)
        ax.legend(['Baseline trajectory', 'Optimized trajectory'], fontsize=12, loc='upper right')
        ax.text(0.45, 0.9, ttl, size=15)
    # for
    fig.supylabel(r"      $\bar{\alpha}$", fontsize=20, rotation=0)  # make it horizontal
    fig.supxlabel('timestep t', fontsize=15)
    plt.show()
    f_path = './configs/chart/abc_o1_s10_all3.png'
    fig.savefig(f_path, bbox_inches='tight')
    print(f"Saved: {f_path}")
    plt.close()

    fig = plt.figure(figsize=(7, 5))  # ------------------------- sup
    ax = fig.add_subplot(111)
    ab_log_ori = ab_log_ori[:3]
    ts_log_ori = ts_log_ori[:3]
    ab_log_new = ab_log_new[:3]
    ts_log_new = ts_log_new[:3]
    ab_last = min(ab_log_ori[-1], ab_log_new[-1])
    idx = 0
    while ab_all[idx] >= ab_last:
        idx += 1
    ab_all = ab_all[:idx+1]
    ts_all = ts_all[:idx+1]
    ab_log_ori = [f+0.0004 for f in ab_log_ori]  # small adjustment based on observation
    ax.tick_params('both', labelsize=12)
    ax.plot(ts_log_ori, ab_log_ori, 'o', ms=6, color='b')
    ax.plot(ts_log_new, ab_log_new, '*', ms=6, color='red')
    ax.plot(ts_all, ab_all, '--', color='green', linewidth=1)
    # why duplicate: the ax legend only follow the plot order, but we want marker cover line.
    ax.plot(ts_log_ori, ab_log_ori, 'o', ms=6, color='b')
    ax.plot(ts_log_new, ab_log_new, '*', ms=6, color='red')
    ax.legend(['Baseline trajectory', 'Optimized trajectory'], fontsize=12, loc='upper right')
    fig.supylabel(r"$\bar{\alpha}$        ", fontsize=20, rotation=0)  # make it horizontal
    fig.supxlabel('timestep t', fontsize=15)
    plt.show()
    f_path = './configs/chart/abc_o1_s10_all3_sup.png'
    fig.savefig(f_path, bbox_inches='tight')
    print(f"Saved: {f_path}")
    plt.close()

def discretization_error_vs_prediction_error():
    """
    discretization error, prediction error.
    wde: with discretization error.
    """
    def read_floats_from_file(f):
        x_arr, y_arr = [], []
        with open(f, 'r') as fptr:
            lines = fptr.readlines()
            for line in lines:
                line = line.strip()
                if line.startswith('#') or line == '': continue
                x, y = line.split()
                x, y = float(x), float(y)
                x_arr.append(x)
                y_arr.append(y)
            # for
        # with
        return y_arr, x_arr

    x04, y04 = read_floats_from_file("./configs/2023-06-14_chart_trajectory/fig_trajectory_wde_04.txt")
    x10, y10 = read_floats_from_file("./configs/2023-06-14_chart_trajectory/fig_trajectory_wde_10.txt")
    x1k, y1k = read_floats_from_file("./configs/2023-06-14_chart_trajectory/fig_trajectory_wde_1000.txt")
    f_path = './configs/2023-06-14_chart_trajectory/fig_trajectory_with_diff_errors.png'
    fig = plt.figure(figsize=(16, 8))
    ax = fig.add_subplot(1, 1, 1)
    ax.tick_params('both', labelsize=25)
    ax.plot(x1k, y1k, linestyle='-', color='r')
    ax.plot(x10, y10, linestyle='-', color='b', marker='o', ms=6)
    ax.plot(x04, y04, linestyle='-', color='c', marker='o', ms=9)

    # arrow
    def add_arrow():
        tmp_fn = lambda xx, yy, idx, r: (xx[idx] * r + xx[idx-1] * (1 - r), yy[idx] * r + yy[idx-1] * (1 - r))
        arrow_props = dict(arrowstyle="->", color='c', lw=2.5)
        m, fm = tmp_fn(x04, y04, 2, 0.91)
        n, fn = tmp_fn(x04, y04, 2, 0.99)
        ax.annotate("", xy=(n, fn), xytext=(m, fm), arrowprops=arrow_props, va='center')
        m, fm = tmp_fn(x04, y04, 3, 0.91)
        n, fn = tmp_fn(x04, y04, 3, 0.99)
        ax.annotate("", xy=(n, fn), xytext=(m, fm), arrowprops=arrow_props, va='center')
        m, fm = tmp_fn(x04, y04, 4, 0.91)
        n, fn = tmp_fn(x04, y04, 4, 0.99)
        ax.annotate("", xy=(n, fn), xytext=(m, fm), arrowprops=arrow_props, va='center')
        arrow_props['color'] = 'b'
        m, fm = tmp_fn(x10, y10, 2, 0.91)
        n, fn = tmp_fn(x10, y10, 2, 0.99)
        ax.annotate("", xy=(n, fn), xytext=(m, fm), arrowprops=arrow_props, va='center')
        m, fm = tmp_fn(x10, y10, 3, 0.91)
        n, fn = tmp_fn(x10, y10, 3, 0.99)
        ax.annotate("", xy=(n, fn), xytext=(m, fm), arrowprops=arrow_props, va='center')
        m, fm = tmp_fn(x10, y10, 4, 0.91)
        n, fn = tmp_fn(x10, y10, 4, 0.99)
        ax.annotate("", xy=(n, fn), xytext=(m, fm), arrowprops=arrow_props, va='center')
        tmp_fn = lambda xx, yy, idx, r: (xx[idx] * r + xx[idx - 50] * (1 - r), yy[idx] * r + yy[idx - 50] * (1 - r))
        arrow_props['color'] = 'r'
        m, fm = tmp_fn(x1k, y1k, 400, 0.91)
        n, fn = tmp_fn(x1k, y1k, 400, 0.99)
        ax.annotate("", xy=(n, fn), xytext=(m, fm), arrowprops=arrow_props, va='center')
        m, fm = tmp_fn(x1k, y1k, 666, 0.91)
        n, fn = tmp_fn(x1k, y1k, 666, 0.99)
        ax.annotate("", xy=(n, fn), xytext=(m, fm), arrowprops=arrow_props, va='center')
        m, fm = tmp_fn(x1k, y1k, 977, 0.91)
        n, fn = tmp_fn(x1k, y1k, 977, 0.99)
        ax.annotate("", xy=(n, fn), xytext=(m, fm), arrowprops=arrow_props, va='center')
    # add_arrow()

    ax.plot(x10, y10, linestyle='-', color='b', marker='o', ms=6)  # extra plot. make such lines in front
    ax.plot(x1k, y1k, linestyle='-', color='r')
    legends = ['Ideal continuous trajectory',
               'Four-step trajectory with discretization error',
               'Four-step trajectory with discretization and prediction error']
    ax.legend(legends, fontsize=20, loc='upper right')
    ax.set_title(f"Data value Comparison by different trajectories", fontsize=25)
    ax.set_xlabel(r"$x_t[a]$",  fontsize=25)
    ax.set_ylabel(r"$x_t[b]$        ",  fontsize=25, rotation=0)
    ax.set_ylim((0.1, 1.0))

    # fig.supylabel('  FID', fontsize=25, rotation=0)  # make it horizontal
    # fig.supxlabel('step count', fontsize=25)
    # fig.suptitle("Compare with SplitNM on ImageNet", fontsize=30)
    plt.show()
    fig.savefig(f_path, bbox_inches='tight')
    print(f"file saved: {f_path}")
    plt.close()

def prediction_error_distribution():
    """ distribution of delta between predicted noise and ground truth noise """
    predefined_bins = 200

    def read_floats_from_file(f):
        x_arr = []
        with open(f, 'r') as fptr:
            lines = fptr.readlines()
            for line in lines:
                line = line.strip()
                if line.startswith('#') or line == '': continue
                x = float(line)
                x_arr.append(x)
            # for
        # with
        return x_arr

    def set_plt_ui(d):
        plt.tick_params('both', labelsize=25)
        # plt.title(r"Distribution of prediction error", fontsize=25)
        if d == 1:
            x_str = f"$1$-$st$ dimension of $\\epsilon_\\theta(x_t) - \\epsilon(x_t)$"
        elif d == 2:
            x_str = f"$2$-$nd$ dimension of $\\epsilon_\\theta(x_t) - \\epsilon(x_t)$"
        elif d == 3:
            x_str = f"$3$-$rd$ dimension of $\\epsilon_\\theta(x_t) - \\epsilon(x_t)$"
        else:
            x_str = f"${d}$-$th$ dimension of $\\epsilon_\\theta(x_t) - \\epsilon(x_t)$"
        plt.xlabel(x_str, fontsize=28)
        plt.ylabel("Frequency", fontsize=28)
        plt.legend(fontsize=25, loc='upper left')

    ts_all = [0, 99, 199, 299, 399, 499, 599, 699, 799, 899, 999]
    ts_list_list = [
        [0, 99, 199],
        [399, 499, 599],
        [799, 899, 999]
    ]
    dim = 0
    for ts_list in ts_list_list:
        fig = plt.figure(figsize=(12, 8))
        # ax = fig.add_subplot(1, 1, 1)
        bins = predefined_bins
        for ts in ts_list:
            x = read_floats_from_file(f"./output0_lostats/dim{dim:04d}_ts{ts:03d}.txt")
            if isinstance(bins, int):
                std = np.std(x)
                bins = np.linspace(-std * 3, std * 3, num=bins+1, endpoint=True)
            n, bins, patches = plt.hist(x, bins=bins, histtype='step', label=f"t={ts + 1}")
        # for
        set_plt_ui(dim+1)
        f_path = f"./output0_lostats/fig_delta_distribution_dim{dim:04d}_{ts_list[0]:03d}-{ts_list[-1]:03d}.png"
        fig.savefig(f_path)
        print(f"saved file: {f_path}")
        plt.close()
    # for

    # for ts in ts_all:
    #     fig = plt.figure(figsize=(12, 8))
    #     ax = fig.add_subplot(1, 1, 1)
    #     x = read_floats_from_file(f"./output0_lostats/ts{ts:03d}.txt")
    #     std = np.std(x)
    #     bins = np.linspace(-std * 3, std * 3, num=predefined_bins+1, endpoint=True)
    #     plt.hist(x, bins=bins, histtype='step', label=f"timestep t={ts + 1}")
    #     set_plt_ui()
    #     f_path = f"./output0_lostats/fig_delta_distribution_ts{ts:03d}.png"
    #     # fig.savefig(f_path, bbox_inches='tight')
    #     fig.savefig(f_path)
    #     print(f"saved file: {f_path}")
    #     plt.close()
    # # for

def ablation_ddim():
    lp_arr = [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4]
    legend_arr = ["logSNR", "quadratic", "uniform"]

    def draw_fig(snr_arr, qua_arr, uni_arr, lambda_s):
        fig = plt.figure(figsize=(12, 8))
        ax = fig.add_subplot(1, 1, 1)
        ax.tick_params('both', labelsize=25)
        ax.plot(lp_arr, snr_arr, marker='o')
        ax.plot(lp_arr, qua_arr, marker='o')
        ax.plot(lp_arr, uni_arr, marker='o')
        ax.legend(legend_arr, fontsize=25, loc=(0.18, 0.73))
        ax.set_title(f"FID by different $lp$ ($\\lambda={lambda_s}$)", fontsize=25)
        ax.set_ylabel('FID      ', fontsize=28, rotation=0)  # make it horizontal
        ax.set_xlabel('$lp$', fontsize=28)
        ax.set_ylim((10, 22))
        f_path = f"./configs/chart/fig_ablation_ddim_lambda{lambda_s}.png"
        fig.savefig(f_path, bbox_inches='tight')  #
        print(f"file saved: {f_path}")
        plt.close()

    fid_snr_arr = [21.087, 18.822, 16.812, 14.250, 13.359, 13.385, 13.126, 13.509, 13.731]
    fid_qua_arr = [14.008, 13.910, 12.684, 12.496, 13.295, 13.333, 13.641, 14.862, 14.459]
    fid_uni_arr = [16.834, 14.241, 12.637, 11.856, 13.157, 14.539, 15.074, 15.073, 15.205]
    lambda_str = '1E07'
    draw_fig(fid_snr_arr, fid_qua_arr, fid_uni_arr, lambda_str)
    fid_snr_arr = [21.087, 18.517, 15.433, 14.332, 14.606, 14.664, 14.861, 14.449, 14.589]
    fid_qua_arr = [14.008, 13.761, 12.163, 11.922, 11.620, 11.724, 11.841, 11.813, 11.799]
    fid_uni_arr = [16.834, 14.224, 12.705, 16.059, 18.232, 19.020, 20.095, 19.801, 18.949]
    lambda_str = '1E08'
    draw_fig(fid_snr_arr, fid_qua_arr, fid_uni_arr, lambda_str)

def main():
    """ entry point """
    # fig_trajectory_ori_vs_new()
    # merge_image()
    # mse_error_vs_alpha_bar()
    # fid_compare_ddim_cifar10()
    # fid_compare_ddim_bedroom()
    # fid_compare_ddim_celeba()
    # fid_compare_pndm_cifar10()
    # fid_compare_splitnm_imagenet()
    # fig_trajectory_compare_all3()
    # discrete_error_predict_error()
    prediction_error_distribution()
    # ablation_ddim()

if __name__ == '__main__':
    main()
